{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","apiUrl","state","requestInProgress","responseUrl","responseStatus","responseStatusText","responseBody","fetchData","console","log","concat","_this","setState","fetch","then","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","url","status","statusText","ok","json","sent","stop","this","_x","apply","arguments","_this$state","responseSection","react_default","createElement","className","JSON","stringify","undefined","type","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oRA8EeA,oNA1EbC,OAAS,gBACTC,MAAQ,CACNC,mBAAmB,EACnBC,YAAa,KACbC,eAAgB,KAChBC,mBAAoB,KACpBC,aAAc,QAOhBC,UAAY,WACVC,QAAQC,IAAR,mBAAAC,OAA+BC,EAAKX,SACpCW,EAAKC,SAAS,CAACV,mBAAmB,GAAO,WACvCW,MAAMF,EAAKX,QACRc,KADH,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KACQ,SAAAC,EAAMC,GAAN,IAAAhB,EAAAH,EAAAC,EAAAC,EAAA,OAAAa,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACJlB,QAAQC,IAAIa,GACRhB,EAAe,KACfH,EAAcmB,EAASK,IACvBvB,EAAiBkB,EAASM,OAC1BvB,EAAqBiB,EAASO,YAC9BP,EAASQ,GANT,CAAAN,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAOmBJ,EAASS,OAP5B,OAOFzB,EAPEkB,EAAAQ,KAAA,OAUJrB,EAAKC,SAAS,CACZV,mBAAmB,EACnBC,cACAC,iBACAC,qBACAC,iBAfE,yBAAAkB,EAAAS,SAAAZ,EAAAa,SADR,gBAAAC,GAAA,OAAApB,EAAAqB,MAAAF,KAAAG,YAAA,0FANFH,KAAK3B,6CAgCE,IAAA+B,EACkFJ,KAAKjC,MAAzFC,EADEoC,EACFpC,kBAAmBC,EADjBmC,EACiBnC,YAAaC,EAD9BkC,EAC8BlC,eAAgBC,EAD9CiC,EAC8CjC,mBAAoBC,EADlEgC,EACkEhC,aAErEiC,EAAkBC,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,iBAAf,cAatB,OAXIxC,EACFqC,EAAkBC,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,iBAAf,uBACTtC,IACTmC,EACEC,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,iBACbF,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,gBAAeF,EAAArB,EAAAsB,cAAA,QAAMC,UAAU,cAAhB,QAA9B,IAAuEF,EAAArB,EAAAsB,cAAA,QAAMC,UAAU,cAAcvC,IACrGqC,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,gBAAeF,EAAArB,EAAAsB,cAAA,QAAMC,UAAU,cAAhB,WAA9B,IAA0EF,EAAArB,EAAAsB,cAAA,QAAMC,UAAU,cAActC,EAA9B,IAA+CC,IACxHC,EAAekC,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,gBAAeF,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,cAAf,SAAuCF,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,cAAcC,KAAKC,UAAUtC,OAAcuC,EAAW,KAAkB,KAKhLL,EAAArB,EAAAsB,cAAA,OAAKC,UAAU,OACbF,EAAArB,EAAAsB,cAAA,sBAAcP,KAAKlC,QAClBuC,EAGDC,EAAArB,EAAAsB,cAAA,UACEK,KAAK,SACLC,QAASb,KAAK3B,WACfiC,EAAArB,EAAAsB,cAAA,KAAGC,UAAU,eAHd,uBAjEUM,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAArB,EAAAsB,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC","file":"static/js/main.9e2893db.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  apiUrl = \"/api/status\";\n  state = {\n    requestInProgress: false,\n    responseUrl: null,\n    responseStatus: null,\n    responseStatusText: null,\n    responseBody: null\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData = () => {\n    console.log(`fetch data from ${this.apiUrl}`);\n    this.setState({requestInProgress: true}, () => {\n      fetch(this.apiUrl)\n        .then(async response => {\n          console.log(response);\n          let responseBody = null;\n          let responseUrl = response.url;\n          let responseStatus = response.status;\n          let responseStatusText = response.statusText;\n          if (response.ok) {\n            responseBody = await response.json();\n          }\n          // let responseBody = await response.json();\n          this.setState({\n            requestInProgress: false,\n            responseUrl,\n            responseStatus,\n            responseStatusText,\n            responseBody\n          });\n        });\n      // .then(response => response.json())\n      // .then(response => {\n      //     this.setState({requestInProgress: false, response});\n      // })\n    });\n  };\n\n  render() {\n    let {requestInProgress, responseUrl, responseStatus, responseStatusText, responseBody} = this.state;\n\n    let responseSection = <div className=\"response-text\">No Request</div>;\n\n    if (requestInProgress) {\n      responseSection = <div className=\"response-text\">Request in Progress</div>;\n    } else if (responseStatus) {\n      responseSection = (\n        <div className=\"response-text\">\n          <div className=\"code-section\"><span className=\"code-label\">URL:</span> <code className=\"code-value\">{responseUrl}</code></div>\n          <div className=\"code-section\"><span className=\"code-label\">STATUS:</span> <code className=\"code-value\">{responseStatus} {responseStatusText}</code></div>\n          {responseBody ? <div className=\"code-section\"><div className=\"code-label\">Body:</div><pre className=\"code-value\">{JSON.stringify(responseBody, undefined, 2)}</pre></div> : \"\"}\n        </div>);\n    }\n\n    return (\n      <div className=\"App\">\n        <h3>API URL: {this.apiUrl}</h3>\n        {responseSection}\n\n\n        <button\n          type=\"button\"\n          onClick={this.fetchData}\n        ><i className=\"fa fa-undo\"/> Fetch Data\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}